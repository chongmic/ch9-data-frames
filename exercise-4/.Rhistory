# What are the column names of your dataframe?
colnames(df)
## Consider: why are they so strange? Think about whether you could use a number
## like 1940 with dollar notation!
# What are the row names of your dataframe?
rownames(df)
# Add a column "category" to your data frame that contains the rownames
df$category <- rownames(df)
# How much money was spent on personal care in 1940?
df$X1940 <- [1, "Personal Care"]
# How much money was spent on Food and Tobacco in 1960?
# What was the highest expenditure category in 1960?
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
# Exercise 3: working with built-in data sets
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
df <- data.frame(USPersonalExpenditure, stringsAsFactors = FALSE)
# What are the column names of your dataframe?
colnames(df)
## Consider: why are they so strange? Think about whether you could use a number
## like 1940 with dollar notation!
# What are the row names of your dataframe?
rownames(df)
# Add a column "category" to your data frame that contains the rownames
df$category <- rownames(df)
# How much money was spent on personal care in 1940?
df$X1940[1, "Personal Care"]
# How much money was spent on Food and Tobacco in 1960?
# What was the highest expenditure category in 1960?
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
# Exercise 3: working with built-in data sets
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
df <- data.frame(USPersonalExpenditure, stringsAsFactors = FALSE)
# What are the column names of your dataframe?
colnames(df)
## Consider: why are they so strange? Think about whether you could use a number
## like 1940 with dollar notation!
# What are the row names of your dataframe?
rownames(df)
# Add a column "category" to your data frame that contains the rownames
df$category <- rownames(df)
# How much money was spent on personal care in 1940?
df$X1940[3, 1]
# How much money was spent on Food and Tobacco in 1960?
# What was the highest expenditure category in 1960?
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
# Exercise 3: working with built-in data sets
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
df <- data.frame(USPersonalExpenditure, stringsAsFactors = FALSE)
# What are the column names of your dataframe?
colnames(df)
## Consider: why are they so strange? Think about whether you could use a number
## like 1940 with dollar notation!
# What are the row names of your dataframe?
rownames(df)
# Add a column "category" to your data frame that contains the rownames
df$category <- rownames(df)
# How much money was spent on personal care in 1940?
df[3. "X1940"]
# How much money was spent on Food and Tobacco in 1960?
# What was the highest expenditure category in 1960?
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
# Exercise 3: working with built-in data sets
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
df <- data.frame(USPersonalExpenditure, stringsAsFactors = FALSE)
# What are the column names of your dataframe?
colnames(df)
## Consider: why are they so strange? Think about whether you could use a number
## like 1940 with dollar notation!
# What are the row names of your dataframe?
rownames(df)
# Add a column "category" to your data frame that contains the rownames
df$category <- rownames(df)
# How much money was spent on personal care in 1940?
df[3. 'X1940']
# How much money was spent on Food and Tobacco in 1960?
# What was the highest expenditure category in 1960?
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
# Exercise 3: working with built-in data sets
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
df <- data.frame(USPersonalExpenditure, stringsAsFactors = FALSE)
# What are the column names of your dataframe?
colnames(df)
## Consider: why are they so strange? Think about whether you could use a number
## like 1940 with dollar notation!
# What are the row names of your dataframe?
rownames(df)
# Add a column "category" to your data frame that contains the rownames
df$category <- rownames(df)
# How much money was spent on personal care in 1940?
df['Personal Care', 'X1940']
# How much money was spent on Food and Tobacco in 1960?
# What was the highest expenditure category in 1960?
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
# Exercise 3: working with built-in data sets
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
df <- data.frame(USPersonalExpenditure, stringsAsFactors = FALSE)
# What are the column names of your dataframe?
colnames(df)
## Consider: why are they so strange? Think about whether you could use a number
## like 1940 with dollar notation!
# What are the row names of your dataframe?
rownames(df)
# Add a column "category" to your data frame that contains the rownames
df$category <- rownames(df)
# How much money was spent on personal care in 1940?
care <- df['Personal Care', 'X1940']
# How much money was spent on Food and Tobacco in 1960?
food <- df['Food and Tobacco', 'x1960']
# What was the highest expenditure category in 1960?
highest <- df$category[df$X1960 == max(df$X1960)]
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
# Exercise 3: working with built-in data sets
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
df <- data.frame(USPersonalExpenditure, stringsAsFactors = FALSE)
# What are the column names of your dataframe?
colnames(df)
## Consider: why are they so strange? Think about whether you could use a number
## like 1940 with dollar notation!
# What are the row names of your dataframe?
rownames(df)
# Add a column "category" to your data frame that contains the rownames
df$category <- rownames(df)
# How much money was spent on personal care in 1940?
care <- df['Personal Care', 'X1940']
# How much money was spent on Food and Tobacco in 1960?
food <- df['Food and Tobacco', 'x1960']
# What was the highest expenditure category in 1960?
highest <- df$category[df$X1960 == max(df$X1960)]
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year) {
col <- paste0('X', year)
df$category[df[, col] == min(df[,col])]
}
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
lowest <- sapply(seq(1940, 1960, 50), lowest_category)
# Exercise 4: external data sets: Gates Foundation Educational Grants
# Use the `read.csv()` function to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv('data/gates_money.csv', stringAsFactor = FALSE)
# Use the View function to look at the loaded data
view(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
## Now you can ask some interesting questions about the dataset
# What was the mean grant value?
# What was the dollar amount of the largest grant?
# What was the dollar amount of the smallest grant?
# Which organization received the largest grant?
# Which organization received the smallest grant?
# How many grants were awarded in 2010?
# Exercise 4: external data sets: Gates Foundation Educational Grants
# Use the `read.csv()` function to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv('users/moses/Documents/info201/ch9-data-frames/exercise-4/data/gates_money.csv', stringAsFactor = FALSE)
# Use the View function to look at the loaded data
view(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
## Now you can ask some interesting questions about the dataset
# What was the mean grant value?
# What was the dollar amount of the largest grant?
# What was the dollar amount of the smallest grant?
# Which organization received the largest grant?
# Which organization received the smallest grant?
# How many grants were awarded in 2010?
# Use the `read.csv()` function to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv('data/gates_money.csv', stringAsFactor = FALSE)
# Use the `read.csv()` function to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv('data/gates_money.csv', stringAsFactor = FALSE)
# Use the `read.csv()` function to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv('data/gates_money.csv')
# Use the `read.csv()` function to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv('data/gates_money.csv', stringAsFactors = FALSE)
setwd("~/info201/ch9-data-frames/exercise-4")
# Exercise 4: external data sets: Gates Foundation Educational Grants
# Use the `read.csv()` function to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv('data/gates_money.csv', stringAsFactors = FALSE)
# Use the View function to look at the loaded data
view(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
## Now you can ask some interesting questions about the dataset
# What was the mean grant value?
# What was the dollar amount of the largest grant?
# What was the dollar amount of the smallest grant?
# Which organization received the largest grant?
# Which organization received the smallest grant?
# How many grants were awarded in 2010?
# Exercise 4: external data sets: Gates Foundation Educational Grants
# Use the `read.csv()` function to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv('data/gates_money.csv', stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
view(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
## Now you can ask some interesting questions about the dataset
# What was the mean grant value?
# What was the dollar amount of the largest grant?
# What was the dollar amount of the smallest grant?
# Which organization received the largest grant?
# Which organization received the smallest grant?
# How many grants were awarded in 2010?
# Exercise 4: external data sets: Gates Foundation Educational Grants
# Use the `read.csv()` function to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
new_data <- read.csv('data/gates_money.csv', stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
# Create a variable `organization` that contains the `organization` column of
# the dataset
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
## Now you can ask some interesting questions about the dataset
# What was the mean grant value?
# What was the dollar amount of the largest grant?
# What was the dollar amount of the smallest grant?
# Which organization received the largest grant?
# Which organization received the smallest grant?
# How many grants were awarded in 2010?
# Use the `read.csv()` function to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
new_data <- read.csv('data/gates_money.csv', stringsAsFactors = FALSE)
riable `organization` that contains the `organization` column of
# the dataset
# Exercise 4: external data sets: Gates Foundation Educational Grants
# Use the `read.csv()` function to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
my_data <- read.csv('data/gates_money.csv', stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
# Create a variable `organization` that contains the `organization` column of
# the dataset
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
## Now you can ask some interesting questions about the dataset
# What was the mean grant value?
# What was the dollar amount of the largest grant?
# What was the dollar amount of the smallest grant?
# Which organization received the largest grant?
# Which organization received the smallest grant?
# How many grants were awarded in 2010?
setwd("~/info201/ch9-data-frames/exercise-4")
# Exercise 4: external data sets: Gates Foundation Educational Grants
# Use the `read.csv()` function to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
my_data <- read.csv('data/gates_money.csv', stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
# Create a variable `organization` that contains the `organization` column of
# the dataset
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
## Now you can ask some interesting questions about the dataset
# What was the mean grant value?
# What was the dollar amount of the largest grant?
# What was the dollar amount of the smallest grant?
# Which organization received the largest grant?
# Which organization received the smallest grant?
# How many grants were awarded in 2010?
# Use the View function to look at the loaded data
view(my_data)
# Exercise 4: external data sets: Gates Foundation Educational Grants
# Use the `read.csv()` function to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
my_data <- read.csv('data/gates_money.csv', stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
view(my_data)
# Create a variable `organization` that contains the `organization` column of
# the dataset
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
## Now you can ask some interesting questions about the dataset
# What was the mean grant value?
# What was the dollar amount of the largest grant?
# What was the dollar amount of the smallest grant?
# Which organization received the largest grant?
# Which organization received the smallest grant?
# How many grants were awarded in 2010?
View(my_data)
# Use the View function to look at the loaded data
View(my_data)
# Exercise 4: external data sets: Gates Foundation Educational Grants
# Use the `read.csv()` function to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
my_data <- read.csv('data/gates_money.csv', stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
View(my_data)
# Create a variable `organization` that contains the `organization` column of
# the dataset
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
## Now you can ask some interesting questions about the dataset
# What was the mean grant value?
# What was the dollar amount of the largest grant?
# What was the dollar amount of the smallest grant?
# Which organization received the largest grant?
# Which organization received the smallest grant?
# How many grants were awarded in 2010?
# Exercise 4: external data sets: Gates Foundation Educational Grants
# Use the `read.csv()` function to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
my_data <- read.csv('data/gates_money.csv', stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
View(my_data)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- colnames(my_data)
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
## Now you can ask some interesting questions about the dataset
# What was the mean grant value?
# What was the dollar amount of the largest grant?
# What was the dollar amount of the smallest grant?
# Which organization received the largest grant?
# Which organization received the smallest grant?
# How many grants were awarded in 2010?
# Exercise 4: external data sets: Gates Foundation Educational Grants
# Use the `read.csv()` function to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv('data/gates_money.csv', stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
## Now you can ask some interesting questions about the dataset
# What was the mean grant value?
mean <- mean(grants$total_amount)
# What was the dollar amount of the largest grant?
highest <- max(grants$total_amount)
# What was the dollar amount of the smallest grant?
lowest <- min(grants$total_amount)
# Which organization received the largest grant?
largest <- organization[grants$total_amount == highest_amount]
# Which organization received the smallest grant?
smallest <- organization[grants$total_amount == lowest_amount]
# How many grants were awarded in 2010?
length(grants$total_amount[grants$start_year == 2010])
# Exercise 4: external data sets: Gates Foundation Educational Grants
# Use the `read.csv()` function to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv('data/gates_money.csv', stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
## Now you can ask some interesting questions about the dataset
# What was the mean grant value?
mean <- mean(grants$total_amount)
# What was the dollar amount of the largest grant?
highest <- max(grants$total_amount)
# What was the dollar amount of the smallest grant?
lowest <- min(grants$total_amount)
# Which organization received the largest grant?
largest <- organization[grants$total_amount == highest]
# Which organization received the smallest grant?
smallest <- organization[grants$total_amount == lowest]
# How many grants were awarded in 2010?
length(grants$total_amount[grants$start_year == 2010])
